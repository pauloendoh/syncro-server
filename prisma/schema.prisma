// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  // googleId  String?  @unique
  username String @unique
  email    String @unique
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  ratings   Rating[]
  interests Interest[]

  follows    Follow[] @relation("following_users")
  followedBy Follow[] @relation("followers")

  profile         Profile?
  customPositions CustomPosition[]
  notifications   Notification[]

  userTokens UserToken[]

  itemsRecommendedFromThem ItemRecommendation[]   @relation("item_recommendations_from_user")
  itemsRecommendedToThem   ItemRecommendation[]   @relation("item_recommendations_to_user")
  ratingsImportRequests    RatingsImportRequest[]
  ratingImportItems        RatingsImportItem[]
  didNotFindItems          DidNotFind[]
}

enum SyncroItemType {
  tvSeries
  movie
  game
  manga
}

model SyncroItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  title       String
  type        SyncroItemType
  imageUrl    String         @default("")
  year        Int?
  avgRating   Float // from external site
  ratingCount Int // from external site
  plotSummary String         @default("")
  ratings     Rating[]
  interests   Interest[]

  igdbUrl     String?
  mangaMalUrl String?

  customPositions     CustomPosition[]
  itemRecommendations ItemRecommendation[]
  ratingImportItems   RatingsImportItem[]
}

model Rating {
  id           String      @id @default(cuid())
  syncroItem   SyncroItem? @relation(fields: [syncroItemId], references: [id], onDelete: Cascade)
  syncroItemId String?

  user        User   @relation(fields: [userId], references: [id])
  userId      String
  ratingValue Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Interest {
  id           String      @id @default(cuid())
  syncroItem   SyncroItem? @relation(fields: [syncroItemId], references: [id], onDelete: Cascade)
  syncroItemId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  interestLevel Int
  position      Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id String @id @default(cuid())

  follower   User   @relation(fields: [followerId], references: [id], name: "following_users")
  followerId String

  followingUser   User   @relation(fields: [followingUserId], references: [id], name: "followers")
  followingUserId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notification Notification?
}

model Profile {
  user   User   @relation(fields: [userId], references: [id])
  userId String @id

  pictureUrl String    @default("https://twirpz.files.wordpress.com/2015/06/twitter-avi-gender-balanced-figure.png")
  fullName   String    @default("")
  bio        String    @default("")
  websiteUrl String    @default("")
  updatedAt  DateTime? @updatedAt
}

model CustomPosition {
  id           String      @id @default(cuid())
  syncroItem   SyncroItem? @relation(fields: [syncroItemId], references: [id], onDelete: Cascade)
  syncroItemId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  position Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ItemRecommendation {
  id String @id @default(cuid())

  toUser   User?   @relation(fields: [toUserId], references: [id], onDelete: Cascade, name: "item_recommendations_to_user")
  toUserId String?

  fromUser   User   @relation(fields: [fromUserId], references: [id], onDelete: Cascade, name: "item_recommendations_from_user")
  fromUserId String

  item   SyncroItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notification Notification?
}

model Notification {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  showDot Boolean @default(true)

  follow   Follow? @relation(fields: [followId], references: [id], onDelete: Cascade)
  followId String? @unique

  itemRecommendation   ItemRecommendation? @relation(fields: [itemRecommendationId], references: [id], onDelete: Cascade)
  itemRecommendationId String?             @unique

  ratingsImportRequest   RatingsImportRequest? @relation(fields: [ratingsImportRequestId], references: [id], onDelete: Cascade)
  ratingsImportRequestId String?               @unique
}

enum TokenType {
  PASSWORD_RESET_CODE
  PUSH_TOKEN
}

model UserToken {
  type   TokenType
  id     String    @id @default(cuid())
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  token String @default(cuid())

  expiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RatingsImportRequestStatus {
  started
  finishedSuccessfully
  errorWhileInitialScraping
}

enum RatingsImportRequestImportFrom {
  MyAnimeList
}

model RatingsImportRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  importFrom RatingsImportRequestImportFrom @default(MyAnimeList)
  status     RatingsImportRequestStatus     @default(started)

  remainingItemsQty Int
  importItems       RatingsImportItem[]
  notification      Notification?
}

enum RatingsImportItemStatus {
  waiting
  importedSuccessfully
  alreadyRated
  errorOrNotFound
  isMovie
}

model RatingsImportItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  request   RatingsImportRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId String

  status RatingsImportItemStatus @default(waiting)

  syncroItem   SyncroItem? @relation(fields: [syncroItemId], references: [id], onDelete: Cascade)
  syncroItemId String?

  ratingValue Int

  originalTitle String
  originalLink  String

  errorQty Int @default(0)
}

model DidNotFind {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  query String
  type  String
}
